name: CI

on:
  push:
    branches: [ main, dev, develop ]
  pull_request:
    branches: [ "**" ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  PIP_DISABLE_PIP_VERSION_CHECK: "1"
  PYTHONDONTWRITEBYTECODE: "1"
  PYTHONUNBUFFERED: "1"

jobs:
  backend-python:
    name: Backend (ABSA/Persona)
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: pension_sentiment
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U postgres" \
          --health-interval 10s \
          --health-timeout 5s \
          --health-retries 5
      redis:
        image: redis:7
        ports:
          - 6379:6379
    defaults:
      run:
        shell: bash
        working-directory: BACKEND-ABSA-SERVICE
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install system tools
        run: |
          sudo apt-get update -y
          sudo apt-get install -y postgresql-client

      - name: Install Python deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install black flake8

      - name: Prepare database
        env:
          PGPASSWORD: postgres
        run: |
          psql -h 127.0.0.1 -U postgres -p 5432 -c 'CREATE DATABASE pension_sentiment;' || true

      - name: Init DB schema
        env:
          DATABASE_URL: postgresql://postgres:postgres@127.0.0.1:5432/pension_sentiment
        run: |
          python - << 'PY'
          from app.db import engine, Base as DBBase
          DBBase.metadata.create_all(bind=engine)
          try:
              from app import models as models_module
              models_module.Base.metadata.create_all(bind=engine)
          except Exception as e:
              print(f"models Base init skipped or failed: {e}")
          PY

      - name: Lint (flake8 minimal)
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics

      - name: Format check (black)
        run: |
          black --check .

      - name: Run tests (pytest)
        env:
          DATABASE_URL: postgresql://postgres:postgres@127.0.0.1:5432/pension_sentiment
          REDIS_URL: redis://127.0.0.1:6379
          AUTH_REQUIRED: "false"
        run: |
          PYTHONPATH=. pytest -q || (echo "Tests failed" && exit 1)

  frontend-web:
    name: Frontend (Dashboard)
    runs-on: ubuntu-latest
    if: ${{ hashFiles('FRONTEND-DASHBOARD/package.json') != '' }}
    defaults:
      run:
        shell: bash
        working-directory: FRONTEND-DASHBOARD
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: 'FRONTEND-DASHBOARD/package-lock.json'

      - name: Install deps
        run: npm ci

      - name: Build
        run: npm run build --if-present

      - name: Test
        run: npm test --if-present

      - name: Lint
        run: npm run lint --if-present

  validate-repo:
    name: Validate Repository
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Run validate_project.sh (STRICT)
        env:
          RULES_ENFORCE_STRICT: "true"
        shell: bash
        run: |
          if [ -x ./validate_project.sh ]; then RULES_ENFORCE_STRICT=true ./validate_project.sh; else echo "No validate_project.sh"; fi

  docker-build:
    name: Docker Build (ABSA)
    runs-on: ubuntu-latest
    needs: [ backend-python ]
    if: ${{ hashFiles('BACKEND-ABSA-SERVICE/Dockerfile') != '' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Build image
        run: |
          docker build -f BACKEND-ABSA-SERVICE/Dockerfile -t absa-ci:latest BACKEND-ABSA-SERVICE

  collector-python:
    name: Collector Service (QA pipeline)
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: BACKEND-COLLECTOR-SERVICE
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-collector-${{ hashFiles('BACKEND-COLLECTOR-SERVICE/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-collector-

      - name: Install Python deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install black flake8

      - name: Lint (flake8 minimal)
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics

      - name: Format check (black)
        run: |
          black --check .

      - name: Run tests if present
        run: |
          if compgen -G "tests/**/*.py" > /dev/null || compgen -G "tests/*.py" > /dev/null; then \
             PYTHONPATH=. pytest -q || (echo "Collector tests failed" && exit 1); \
          else \
             echo "No tests for collector"; \
          fi
