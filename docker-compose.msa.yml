# Complete MSA Stack with Infrastructure
# Services:
# - PostgreSQL with pgvector extension
# - Redis for caching
# - All 5 microservices: Analysis, Collector, ABSA, Alert, API Gateway

services:
  # Infrastructure Services
  postgres:
    image: pgvector/pgvector:pg16
    container_name: postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
      POSTGRES_DB: ${POSTGRES_DB:-pension_sentiment}
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./DOCKER/pgvector/init.sql:/docker-entrypoint-initdb.d/00-init.sql:ro
    networks:
      - msa-network

  redis:
    image: redis:7-alpine
    container_name: redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - msa-network

  mongo:
    image: mongo:7
    container_name: mongo
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USERNAME:-admin}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD:-password}
    ports:
      - "27017:27017"
    volumes:
      - mongo-data:/data/db
    networks:
      - msa-network

  # Core Microservices
  api-gateway:
    build: ./BACKEND-API-GATEWAY
    container_name: api-gateway
    restart: unless-stopped
    environment:
      - PORT=8000
      - DEBUG=false
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/pension_sentiment
      - REDIS_URL=redis://redis:6379
      - ANALYSIS_SERVICE_URL=http://analysis-service:8001
      - COLLECTOR_SERVICE_URL=http://collector-service:8002
      - ABSA_SERVICE_URL=http://absa-service:8003
      - ALERT_SERVICE_URL=http://alert-service:8004
      - OSINT_ORCHESTRATOR_URL=http://osint-orchestrator:8005
      - OSINT_PLANNING_URL=http://osint-planning:8006
      - OSINT_SOURCE_URL=http://osint-source:8007
    ports:
      - "8000:8000"
    depends_on:
      - postgres
      - redis
      - analysis-service
      - collector-service
      - absa-service
      - alert-service
      - osint-orchestrator
      - osint-planning
      - osint-source
    networks:
      - msa-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  analysis-service:
    build: ./BACKEND-ANALYSIS-SERVICE
    container_name: analysis-service
    restart: unless-stopped
    environment:
      - PORT=8001
      - DEBUG=false
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/pension_sentiment
      - REDIS_URL=redis://redis:6379
    ports:
      - "8001:8001"
    depends_on:
      - postgres
      - redis
    volumes:
      - ml-models:/app/models
    networks:
      - msa-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  collector-service:
    build: ./BACKEND-COLLECTOR-SERVICE
    container_name: collector-service
    restart: unless-stopped
    environment:
      - PORT=8002
      - DEBUG=false
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/pension_sentiment
      - REDIS_URL=redis://redis:6379
      - ANALYSIS_SERVICE_URL=http://analysis-service:8001
    ports:
      - "8002:8002"
    depends_on:
      - postgres
      - redis
    networks:
      - msa-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  absa-service:
    build: ./BACKEND-ABSA-SERVICE
    container_name: absa-service
    restart: unless-stopped
    environment:
      - PORT=8003
      - DEBUG=false
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/pension_sentiment
      - REDIS_URL=redis://redis:6379
      - ANALYSIS_SERVICE_URL=http://analysis-service:8001
    ports:
      - "8003:8003"
    depends_on:
      - postgres
      - redis
    volumes:
      - absa-models:/app/models
    networks:
      - msa-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8003/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  alert-service:
    build: ./BACKEND-ALERT-SERVICE
    container_name: alert-service
    restart: unless-stopped
    environment:
      - PORT=8004
      - DEBUG=false
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/pension_sentiment
      - REDIS_URL=redis://redis:6379
      - ANALYSIS_SERVICE_URL=http://analysis-service:8001
      - COLLECTOR_SERVICE_URL=http://collector-service:8002
      - ABSA_SERVICE_URL=http://absa-service:8003
    ports:
      - "8004:8004"
    depends_on:
      - postgres
      - redis
    networks:
      - msa-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8004/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # OSINT Services
  osint-orchestrator:
    build: ./BACKEND-OSINT-ORCHESTRATOR-SERVICE
    container_name: osint-orchestrator
    restart: unless-stopped
    environment:
      - PORT=8005
      - DEBUG=false
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/pension_sentiment
      - REDIS_URL=redis://redis:6379
      - PLANNING_SERVICE_URL=http://osint-planning:8006
      - SOURCE_SERVICE_URL=http://osint-source:8007
    ports:
      - "8005:8005"
    depends_on:
      - postgres
      - redis
      - osint-planning
      - osint-source
    networks:
      - msa-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8005/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  osint-planning:
    build: ./BACKEND-OSINT-PLANNING-SERVICE
    container_name: osint-planning
    restart: unless-stopped
    environment:
      - PORT=8006
      - DEBUG=false
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/pension_sentiment
      - REDIS_URL=redis://redis:6379
    ports:
      - "8006:8006"
    depends_on:
      - postgres
      - redis
    networks:
      - msa-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8006/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  osint-source:
    build: ./BACKEND-OSINT-SOURCE-SERVICE
    container_name: osint-source
    restart: unless-stopped
    environment:
      - PORT=8007
      - DEBUG=false
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/pension_sentiment
      - REDIS_URL=redis://redis:6379
    ports:
      - "8007:8007"
    depends_on:
      - postgres
      - redis
    networks:
      - msa-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8007/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Optional: Web Dashboard (if using the existing frontend)
  dashboard:
    build: ./FRONTEND-DASHBOARD
    container_name: dashboard
    restart: unless-stopped
    environment:
      - REACT_APP_API_URL=http://localhost:8000
    ports:
      - "3000:3000"
    depends_on:
      - api-gateway
    networks:
      - msa-network

networks:
  msa-network:
    driver: bridge

volumes:
  postgres-data:
  redis-data:
  mongo-data:
  ml-models:
  absa-models: